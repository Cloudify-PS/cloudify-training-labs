tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/3.4.1/types.yaml
  - http://www.getcloudify.org/spec/fabric-plugin/1.4.2/plugin.yaml
  - http://www.getcloudify.org/spec/aws-plugin/1.4.3/plugin.yaml

inputs:
  # General
  students_count:
    type: integer
    default: 0
  aws_access_key_id:
    type: string
  aws_secret_access_key:
    type: string
  ec2_region_name:
    type: string
    default: us-east-1
  agents_security_group_id:
    type: string
  server_names_prefix:
    type: string
    default: ''
  use_existing_lab_vms_security_group:
    type: boolean
    default: false
  lab_vms_security_group_id:
    type: string
    default: cfy-3.4.1-lab-vm
  training_private_key:
    type: string
    default: /root/cfy-training.pem
  # Keypair
  keypair_name:
    type: string
  private_key_path:
    type: string
  # Subnet
  use_existing_subnet:
    type: boolean
  subnet_id:
    type: string
  # VPC
  use_existing_vpc:
    type: boolean
    default: false
  vpc_id:
    type: string
    default: ''
  cidr_block:
    type: string
  # CLI
  cli_image_id:
    type: string
    default: ami-6d1c2007
  cli_instance_type:
    type: string
    default: t2.micro
  cli_ssh_user:
    type: string
    default: centos
  labs_archive:
    type: string
    default: https://github.com/Cloudify-PS/cloudify-training-labs/archive/3.4.1.tar.gz
  github_user:
    type: string
  github_api_key:
    type: string
  # CLI security group
  use_existing_cli_security_group:
    type: boolean
    default: false
  cli_security_group_id:
    type: string
    default: cfy-training-3.4.1-cli
  # Manager
  manager_image_id:
    type: string
    default: ami-6d1c2007
  manager_instance_type:
    type: string
    default: t2.medium
  manager_ssh_user:
    type: string
    default: centos
  use_existing_manager_security_group:
    type: boolean
    default: false
  manager_security_group_id:
    type: string
    default: cfy-training-3.4.1-manager
  # NodeJS
  nodejs_image_id:
    type: string
    default: ami-6d1c2007
  nodejs_instance_type:
    type: string
    default: t2.micro
  nodejs_ssh_user:
    type: string
    default: centos
  use_existing_nodejs_security_group:
    type: boolean
    default: false
  nodejs_security_group_id:
    default: cfy-training-3.4.1-nodejs
  # MongoDB
  mongodb_image_id:
    type: string
    default: ami-6d1c2007
  mongodb_instance_type:
    type: string
    default: t2.micro
  mongodb_ssh_user:
    type: string
    default: centos
  use_existing_mongodb_security_group:
    type: boolean
    default: false
  mongodb_security_group_id:
    default: cfy-training-3.4.1-mongodb
  # Resources
  use_existing_resources_vm:
    type: boolean
    default: false
  resources_vm_name:
    type: string
    default: ''
  use_existing_resources_security_group:
    type: boolean
    default: false
  resources_security_group_id:
    type: string
    default: cfy-3.4.1-resources
  resources_image_id:
    type: string
    default: ami-6d1c2007
  resources_instance_type:
    type: string
    default: t2.micro
  resources_ssh_user:
    type: string
    default: centos

dsl_definitions:
  aws_config: &aws_config
    aws_access_key_id: { get_input: aws_access_key_id }
    aws_secret_access_key: { get_input: aws_secret_access_key }
    ec2_region_name: { get_input: ec2_region_name }
  cli_fabric_env: &cli_fabric_env
    host_string: { get_attribute: [ cli_vm, public_ip_address ]}
    user: { get_input: cli_ssh_user }
    key_filename: { get_property: [ keypair, private_key_path ] }
  nodejs_fabric_env: &nodejs_fabric_env
    host_string: { get_attribute: [ nodejs_vm, public_ip_address ]}
    user: { get_input: nodejs_ssh_user }
    key_filename: { get_property: [ keypair, private_key_path ] }
  resources_fabric_env: &resources_fabric_env
    host_string: { get_attribute: [ resources_vm, ip ]}
    user: { get_input: resources_ssh_user }
    key_filename: { get_property: [ keypair, private_key_path ] }

node_types:
  lab_vm:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      aws_config:
        default: *aws_config
      agent_config:
        default:
          install_method: none
#          user: centos
#          key: { get_input: training_private_key }

  resources_vm:
    derived_from: cloudify.aws.nodes.Instance
    properties:
      aws_config:
        default: *aws_config
      agent_config:
        default:
          install_method: remote
          user: centos
          key: { get_input: training_private_key }

node_templates:
  keypair:
    type: cloudify.aws.nodes.KeyPair
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: keypair_name }
      private_key_path: { get_input: private_key_path }

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_vpc }
      resource_id: { get_input: vpc_id }
      cidr_block: { get_input: cidr_block }

  subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_subnet }
      resource_id: { get_input: subnet_id }
      cidr_block: ''
    relationships:
      - type: cloudify.aws.relationships.subnet_contained_in_vpc
        target: vpc

  cli_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_cli_security_group }
      resource_id: { get_input: cli_security_group_id }
      description: Cloudify Training (CLI)
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        # Required for the "Running NodeCellar Locally" lab
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        # Required for the "Using Scripts" lab
        - ip_protocol: tcp
          from_port: 8081
          to_port: 8081
          cidr_ip: 0.0.0.0/0
    relationships:
      - target: vpc
        type: cloudify.aws.relationships.security_group_contained_in_vpc
  manager_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_manager_security_group }
      resource_id: { get_input: manager_security_group_id }
      description: Cloudify Training (manager)
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 53229
          to_port: 53229
          cidr_ip: { get_input: cidr_block }
        - ip_protocol: tcp
          from_port: 5672
          to_port: 5672
          cidr_ip: { get_input: cidr_block }
        - ip_protocol: tcp
          from_port: 8101
          to_port: 8101
          cidr_ip: { get_input: cidr_block }
    relationships:
      - target: vpc
        type: cloudify.aws.relationships.security_group_contained_in_vpc
  nodejs_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_nodejs_security_group }
      resource_id: { get_input: nodejs_security_group_id }
      description: Cloudify Training (NodeJS)
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
        # Required for monitoring lab
        - ip_protocol: tcp
          from_port: 8082
          to_port: 8082
          cidr_ip: 0.0.0.0/0
    relationships:
      - target: vpc
        type: cloudify.aws.relationships.security_group_contained_in_vpc
  mongodb_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_mongodb_security_group }
      resource_id: { get_input: mongodb_security_group_id }
      description: Cloudify Training (MongoDB)
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 27017
          to_port: 27017
          cidr_ip: { get_input: cidr_block }
    relationships:
      - target: vpc
        type: cloudify.aws.relationships.security_group_contained_in_vpc
  cli_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
  cli_vm:
    type: lab_vm
    properties:
      image_id: { get_input: cli_image_id }
      instance_type: { get_input: cli_instance_type }
      name: { concat: [{ get_input: server_names_prefix }, 'cli']}
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: cli_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
      - target: agents_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: cli_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: lab_vm_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: subnet
        type: cloudify.aws.relationships.instance_connected_to_subnet
  cli_configuration:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            commands:
              - sudo yum -y install unzip git nano
              # pip and virtualenv are not needed by Cloudify as of 3.4, but needed by the
              # developing-simple-plugin lab
              - curl https://bootstrap.pypa.io/get-pip.py | sudo python
              - sudo pip install virtualenv
            fabric_env: *cli_fabric_env
        configure:
          implementation: scripts/configure.sh
          executor: central_deployment_agent
          inputs:
            host: { get_attribute: [ cli_vm, public_ip_address ]}
            user: { get_input: cli_ssh_user }
            key_filename: { get_property: [ keypair, private_key_path ] }
      labs:
        pull:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            commands:
              - cd cloudify-training-labs && git pull
            fabric_env: *cli_fabric_env
    relationships:
      - target: cli_vm
        type: cloudify.relationships.contained_in

  cli_labs:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        # "create" can also be used to refresh the labs.
        # It'd be nicer to implement "delete" and use the "heal" workflow...
        # but "heal" (at least currently) kills entire VM's...
        create:
          implementation: scripts/refresh-labs.sh
          executor: central_deployment_agent
          inputs:
            host: { get_attribute: [ cli_vm, public_ip_address ]}
            user: { get_input: cli_ssh_user }
            key_filename: { get_property: [ keypair, private_key_path ] }
            labs_archive: { get_input: labs_archive }
            github_user: { get_input: github_user }
            github_api_key: { get_input: github_api_key }
    relationships:
      - target: cli_vm
        type: cloudify.relationships.contained_in

  manager_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
  manager_vm:
    type: lab_vm
    properties:
      image_id: { get_input: manager_image_id }
      instance_type: { get_input: manager_instance_type }
      name: { concat: [{ get_input: server_names_prefix }, 'manager']}
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: manager_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
      - target: agents_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: manager_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: lab_vm_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: subnet
        type: cloudify.aws.relationships.instance_connected_to_subnet
  nodejs_ip:
    type: cloudify.aws.nodes.ElasticIP
    properties:
      aws_config: *aws_config
      domain: vpc
  nodejs_vm:
    type: lab_vm
    properties:
      image_id: { get_input: nodejs_image_id }
      instance_type: { get_input: nodejs_instance_type }
      name: { concat: [{ get_input: server_names_prefix }, 'nodejs']}
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: nodejs_ip
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
      - target: nodejs_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: lab_vm_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: agents_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: subnet
        type: cloudify.aws.relationships.instance_connected_to_subnet
  nodejs_configuration:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: fabric.fabric_plugin.tasks.run_commands
          inputs:
            commands:
              # Required for monitoring lab
              - sudo yum -y install unzip
            fabric_env: *nodejs_fabric_env
    relationships:
      - target: nodejs_vm
        type: cloudify.relationships.contained_in
  mongodb_vm:
    type: lab_vm
    properties:
      image_id: { get_input: mongodb_image_id }
      instance_type: { get_input: mongodb_instance_type }
      name: { concat: [{ get_input: server_names_prefix }, 'mongodb']}
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: mongodb_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: lab_vm_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: agents_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: subnet
        type: cloudify.aws.relationships.instance_connected_to_subnet

  resources_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_resources_security_group }
      resource_id: { get_input: resources_security_group_id }
      description: For Cloudify 3.4.1 training resources
      rules:
        - ip_protocol: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - ip_protocol: tcp
          from_port: 8080
          to_port: 8080
          cidr_ip: 0.0.0.0/0
    relationships:
      - target: vpc
        type: cloudify.aws.relationships.security_group_contained_in_vpc

  lab_vm_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: { get_input: use_existing_lab_vms_security_group }
      resource_id: { get_input: lab_vms_security_group_id }
      description: For all lab VMs
    # No rules. This is for future use.
    relationships:
      - target: vpc
        type: cloudify.aws.relationships.security_group_contained_in_vpc

  agents_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: agents_security_group_id }
      description: ''

  resources_vm:
    type: resources_vm
    properties:
      use_external_resource: { get_input: use_existing_resources_vm }
      resource_id: { get_input: resources_vm_name }
      resource_id: { get_input: resources_security_group_id }
      image_id: { get_input: resources_image_id }
      instance_type: { get_input: resources_instance_type }
      name: resources
    relationships:
      - target: keypair
        type: cloudify.aws.relationships.instance_connected_to_keypair
      - target: agents_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: resources_security_group
        type: cloudify.aws.relationships.instance_connected_to_security_group
      - target: subnet
        type: cloudify.aws.relationships.instance_connected_to_subnet

  resources_configuration:
    type: cloudify.nodes.Root
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/download-resources.py
          inputs:
            resources:
              - url: http://www.getcloudify.org/spec/cloudify/3.4.1/types.yaml
                location: ~/yaml/spec/cloudify/3.4.1/types.yaml
              - url: http://www.getcloudify.org/spec/fabric-plugin/1.4.1/plugin.yaml
                location: ~/yaml/spec/fabric-plugin/1.4.1/plugin.yaml
              - url: http://repository.cloudifysource.org/org/cloudify3/wagons/cloudify-fabric-plugin/1.4.1/cloudify_fabric_plugin-1.4.1-py27-none-linux_x86_64-centos-Core.wgn
                location: ~/
              - url: http://repository.cloudifysource.org/org/cloudify3/3.4.1/sp-RELEASE/cloudify-manager-resources_3.4.1-sp-b410.tar.gz
                location: ~/
        start:
          # For some reason, running this:
          # nohup python -m SimpleHTTPServer 8080 > ~/http.out 2> ~/http.err &
          # - through Fabric using commands runner mode, doesn't seem to start SimpleHTTPServer. Will look into it
          # later.
          implementation: scripts/start-http.sh
    relationships:
      - target: resources_vm
        type: cloudify.relationships.contained_in

groups:
  trainee:
    members: [cli_vm, cli_ip, nodejs_vm, nodejs_ip, manager_vm, manager_ip, mongodb_vm]

policies:
  trainee_policy:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: students_count }
    targets: [trainee]

outputs:
  ip_addresses:
    value:
      cli:
        private: { get_attribute: [cli_vm, ip] }
        public: { get_attribute: [cli_vm, public_ip_address]}
      manager:
        private: { get_attribute: [manager_vm, ip] }
        public: { get_attribute: [manager_vm, public_ip_address]}
      nodejs:
        private: { get_attribute: [nodejs_vm, ip] }
        public: { get_attribute: [nodejs_vm, public_ip_address]}
      mongodb: { get_attribute: [mongodb_vm, ip] }
