plugins:
  # Name could be anything, this name is what appears on the beginning of operation
  # mappings.
  test_plugin:
    # Could be 'central_deployment_agent' or 'host_agent'.
    # If 'central_deployment_agent', this plugin will be executed on the
    # deployment dedicated agent, other wise it will be executed on the host agent.
    executor: central_deployment_agent

    # URL to archive containing the plugin or name of directory containing
    # the plugin if it is included in the the blueprint directory under the
    # "plugins" directory.
    # Usage of "source" is supported, but not recommended, as it results in the
    # plugin going through `pip` installation on each and every agent (thus requiring
    # access to the `pip` repository/mirror, compilers and so forth).
    # Usage of plugin Wagon files, whenever possible, is recommended.
    # source: https://github.com/Cloudify-PS/cloudify-training-labs/archive/refs/releases/6.3.1.zip

    # The plugin's name, as it is known to Cloudify Manager. Cloudify Manager uses this
    # name to index the plugin in the plugins table.
    package_name: cloudify-simple-plugin

    # The plugin's version. NOTE - it is recommended that this value is quoted, in order to
    # ensure it passes YAML parsing as a string (by default, the value "1.0" [without quotes]
    # will be parsed as a float).
    package_version: '1.0'

node_types:
  test.nodes.Concat:
    derived_from: cloudify.nodes.Root
    properties:
      str1:
        type: string
      str2:
        type: string
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          implementation: test_plugin.plugin.tasks.my_task
          inputs:
            # my_task accepts a single property named
            # some property. Here we inject this property
            # from the input provided by the test
            # (or 'default_test_input' if no input was provided)
            str1:
              type: string
              default: { get_property: [SELF, str1] }
            str2:
              type: string
              default: { get_property: [SELF, str2] }
      ## for additional custom workflow
      test.interfaces.operations:
        upper:
          implementation: test_plugin.plugin.tasks.upper
          inputs:
            log_output:
              type: boolean
              default: false

workflows:
  uppercase:
    mapping: test_plugin.plugin.workflows.uppercase
    parameters:
      log_output:
        type: boolean
        default: true
